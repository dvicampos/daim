<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f6f9;
    }

    .container {
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 30px;
    }

    h1 {
        color: #333;
        font-size: 2rem;
        font-weight: bold;
        text-align: center;
    }

    .form-label {
        font-weight: 600;
        font-size: 0.9rem;
        color: #444;
    }

    .form-select, .form-control {
        border-radius: 5px;
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #ccc;
    }

    .form-select:focus, .form-control:focus {
        border-color: #66afe9;
        outline: none;
    }

    .row {
        margin-bottom: 20px;
    }

    .btn {
        font-size: 1.1rem;
        padding: 12px 20px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .btn-success:hover {
        background-color: #218838;
    }

    .canvas-container {
        margin: 20px 0;
    }

    canvas {
        max-width: 100%;
        margin: 20px auto;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    }

    .mb-4 {
        margin-bottom: 30px;
    }
</style>

<div class="container my-4">
    <h1>GrÃ¡ficas del grupo: <%= grupo.nombre_empresa %></h1>

    <div class="row mb-4 g-3 justify-content-center">
        <div class="col-md-3">
            <label class="form-label" for="fechaInicioFiltro">Fecha inicio:</label>
            <input type="date" id="fechaInicioFiltro" class="form-control">
        </div>
        <div class="col-md-3">
            <label class="form-label" for="fechaFinFiltro">Fecha fin:</label>
            <input type="date" id="fechaFinFiltro" class="form-control">
        </div>
    </div>

    <div class="row mb-4 g-3 justify-content-center">
        <div class="col-md-3">
            <label class="form-label" for="estadoFiltro">Estado:</label>
            <select id="estadoFiltro" class="form-select">
                <option value="">Todos</option>
                <option value="pendiente">Pendiente</option>
                <option value="finalizado">Finalizado</option>
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label" for="clienteFiltro">Cliente:</label>
            <select id="clienteFiltro" class="form-select">
                <option value="Todos">Todos</option>
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label" for="categoriaFiltro">CategorÃ­a:</label>
            <select id="categoriaFiltro" class="form-select">
                <option value="">Todos</option>
            </select>
        </div>
    </div>

    <div class="text-center mb-4">
        <button class="btn btn-success" onclick="exportarExcel()">ðŸ“¥ Exportar a Excel</button>
    </div>

    <div class="row text-center canvas-container">
        <div class="col-12 col-md-6 mb-4">
            <canvas id="casosPorFecha"></canvas>
        </div>
        <div class="col-12 col-md-6 mb-4">
            <canvas id="precioPorMes"></canvas>
        </div>
        <div class="col-12 col-md-6 mb-4">
            <canvas id="gananciaAcumulada"></canvas>
        </div>
        <div class="col-12 col-md-6 mb-4">
            <canvas id="estadoCasos"></canvas>
        </div>
        <div class="col-12 col-md-6 mb-4">
            <canvas id="categoriasFrecuentes"></canvas>
        </div>
        <div class="col-12 col-md-6 mb-4">
            <canvas id="casosPorCliente"></canvas>
        </div>
    </div>
</div>

<script>
    const casos = <%- JSON.stringify(casos) %>;

    const clientes = [...new Set(casos.map(c => c.cliente_nombre))];
    const categorias = [...new Set(casos.flatMap(c => c.categorias_nombres.split(', ').filter(Boolean)))];

    const filtros = { 
        estado: '', 
        cliente: '', 
        categoria: '', 
        fechaInicio: '', 
        fechaFin: '' 
    };

    const clienteSelect = document.getElementById('clienteFiltro');
    clientes.forEach(c => clienteSelect.innerHTML += `<option value="${c}">${c}</option>`);

    const catSelect = document.getElementById('categoriaFiltro');
    categorias.forEach(c => catSelect.innerHTML += `<option value="${c}">${c}</option>`);

    document.getElementById('estadoFiltro').onchange = (e) => { filtros.estado = e.target.value; renderAll(); };
    clienteSelect.onchange = (e) => { filtros.cliente = e.target.value; renderAll(); };
    catSelect.onchange = (e) => { filtros.categoria = e.target.value; renderAll(); };

    // Captura de fechas de los filtros
    document.getElementById('fechaInicioFiltro').onchange = (e) => { filtros.fechaInicio = e.target.value; renderAll(); };
    document.getElementById('fechaFinFiltro').onchange = (e) => { filtros.fechaFin = e.target.value; renderAll(); };

    function filtrarCasos() {
        return casos.filter(c => {
            return (!filtros.estado || c.estado === filtros.estado)
                && (!filtros.cliente || c.cliente_nombre === filtros.cliente)
                && (!filtros.categoria || c.categorias_nombres.includes(filtros.categoria))
                && (!filtros.fechaInicio || new Date(c.fecha_entrega) >= new Date(filtros.fechaInicio))
                && (!filtros.fechaFin || new Date(c.fecha_entrega) <= new Date(filtros.fechaFin));
        });
    }

    let charts = [];

    function renderAll() {
        charts.forEach(c => c.destroy());
        charts = [];

        const filtrados = filtrarCasos();

        const porFecha = {};
        filtrados.forEach(c => {
            const fecha = c.fecha_entrega.split('T')[0];
            porFecha[fecha] = (porFecha[fecha] || 0) + 1;
        });
        charts.push(new Chart(document.getElementById('casosPorFecha'), {
            type: 'line',
            data: {
                labels: Object.keys(porFecha),
                datasets: [{ label: 'Casos por Fecha', data: Object.values(porFecha), borderColor: 'blue', fill: false }]
            }
        }));

        const precioMes = {};
        filtrados.forEach(c => {
            const mes = c.fecha_entrega.slice(0, 7);
            precioMes[mes] = (precioMes[mes] || 0) + Number(c.precio);
        });

        charts.push(new Chart(document.getElementById('precioPorMes'), {
            type: 'bar',
            data: {
                labels: Object.keys(precioMes),
                datasets: [{ label: 'Precio Total por Mes', data: Object.values(precioMes), backgroundColor: 'green' }]
            }
        }));

        const ordenado = Object.keys(precioMes).sort();
        const ganancia = ordenado.map((_, i) => ordenado.slice(0, i + 1).reduce((acc, k) => acc + precioMes[k], 0));
        charts.push(new Chart(document.getElementById('gananciaAcumulada'), {
            type: 'line',
            data: {
                labels: ordenado,
                datasets: [{ label: 'Ganancia Acumulada', data: ganancia, borderColor: 'orange', fill: false }]
            }
        }));

        const estados = {};
        filtrados.forEach(c => estados[c.estado] = (estados[c.estado] || 0) + 1);
        charts.push(new Chart(document.getElementById('estadoCasos'), {
            type: 'doughnut',
            data: {
                labels: Object.keys(estados),
                datasets: [{ label: 'Estados', data: Object.values(estados), backgroundColor: ['red', 'yellow', 'green'] }]
            }
        }));

        const categoriasCount = {};
        filtrados.forEach(c => {
            c.categorias_nombres.split(', ').forEach(cat => {
                categoriasCount[cat] = (categoriasCount[cat] || 0) + 1;
            });
        });
        charts.push(new Chart(document.getElementById('categoriasFrecuentes'), {
            type: 'bar',
            data: {
                labels: Object.keys(categoriasCount),
                datasets: [{ label: 'CategorÃ­as', data: Object.values(categoriasCount), backgroundColor: 'purple' }]
            }
        }));

        const porCliente = {};
        filtrados.forEach(c => porCliente[c.cliente_nombre] = (porCliente[c.cliente_nombre] || 0) + 1);
        charts.push(new Chart(document.getElementById('casosPorCliente'), {
            type: 'bar',
            data: {
                labels: Object.keys(porCliente),
                datasets: [{ label: 'Casos por Cliente', data: Object.values(porCliente), backgroundColor: 'skyblue' }]
            }
        }));
    }

    renderAll();

    function exportarExcel() {
        const filtrados = filtrarCasos();
        fetch('/casos/exportar', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ casos: filtrados })
        })
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'casos_exportados.xlsx';
                document.body.appendChild(a);
                a.click();
                a.remove();
            })
            .catch(error => {
                console.error('Error al exportar:', error);
                alert('Error al exportar los casos.');
            });
    }
    function filtrarCasos() {
    return casos.filter(c => {
        return (!filtros.estado || c.estado === filtros.estado)
            && (!filtros.cliente || filtros.cliente === "Todos" || c.cliente_nombre === filtros.cliente) // Ajustar para "Todos"
            && (!filtros.categoria || c.categorias_nombres.includes(filtros.categoria));
    });
    }

</script>
